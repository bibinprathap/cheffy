{"ast":null,"code":"import jwt_decode from 'jwt-decode';\nimport axiosClient from '../../../utils/axios-config';\nimport * as types from './authType';\nimport { asyncLocalStorage } from '../../../utils/localStorage';\nimport config from '../../../config';\nexport function userLogin(params) {\n  return async dispatch => {\n    dispatch({\n      type: types.AUTH_LOGIN_REQUEST\n    });\n\n    try {\n      const res = await axiosClient.post('user/login', params, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const decoded = jwt_decode(res.token);\n      console.log(res);\n      dispatch({\n        type: types.AUTH_LOGIN_SUCCESS,\n        payload: decoded\n      });\n      return res;\n    } catch (error) {\n      //console.log('error', error);\n      dispatch({\n        type: types.AUTH_LOGIN_FAILURE\n      });\n      return Promise.reject(error);\n    }\n  };\n}\nexport function userSignup(parms) {\n  return async dispatch => {\n    dispatch({\n      type: types.AUTH_SIGNUP_REQUEST\n    });\n\n    try {\n      console.log(parms);\n      const res = await axiosClient.post('user/complete-registration', parms, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }); // console.log(res)\n\n      const status = res.status;\n\n      if (status == 201) {\n        dispatch({\n          type: types.AUTH_SIGNUP_SUCCESS,\n          payload: res.result.name\n        });\n        return res.status;\n      } else {\n        dispatch({\n          type: types.AUTH_SIGNUP_FAILURE\n        });\n        return Promise.reject(e);\n      }\n    } catch (e) {\n      dispatch({\n        type: types.AUTH_SIGNUP_FAILURE\n      });\n      return Promise.reject(e);\n    }\n  };\n}\nexport async function saveTokens(params) {\n  try {\n    //console.log(\"saveTokens params\", params);\n    const {\n      access_token,\n      decoded\n    } = params;\n    const {\n      expires_in,\n      type\n    } = decoded;\n    const expires_at = new Date();\n    expires_at.setSeconds(expires_at.getSeconds() + expires_in);\n    await asyncLocalStorage.setItem(config.AUTH_IN, expires_in);\n    await asyncLocalStorage.setItem(config.AUTH_AT, expires_at.getTime());\n    await asyncLocalStorage.setItem(config.AUTH_TOKEN, access_token);\n    await asyncLocalStorage.setItem(config.AUTH_TYPE, type);\n    return Promise.resolve(true);\n  } catch (err) {\n    throw err;\n  }\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Skyslit/Web Projects/Freelance/cheffy/src/redux/actions/auth/authAction.js"],"names":["jwt_decode","axiosClient","types","asyncLocalStorage","config","userLogin","params","dispatch","type","AUTH_LOGIN_REQUEST","res","post","headers","decoded","token","console","log","AUTH_LOGIN_SUCCESS","payload","error","AUTH_LOGIN_FAILURE","Promise","reject","userSignup","parms","AUTH_SIGNUP_REQUEST","status","AUTH_SIGNUP_SUCCESS","result","name","AUTH_SIGNUP_FAILURE","e","saveTokens","access_token","expires_in","expires_at","Date","setSeconds","getSeconds","setItem","AUTH_IN","AUTH_AT","getTime","AUTH_TOKEN","AUTH_TYPE","resolve","err"],"mappings":"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","sourcesContent":["import jwt_decode from 'jwt-decode';\r\nimport axiosClient from '../../../utils/axios-config';\r\nimport * as types from './authType';\r\nimport { asyncLocalStorage } from '../../../utils/localStorage';\r\nimport config from '../../../config';\r\n\r\nexport function userLogin(params) {\r\n\treturn async (dispatch) => {\r\n\t\tdispatch({ type: types.AUTH_LOGIN_REQUEST });\r\n\t\ttry {\r\n\t\t\tconst res = await axiosClient.post('user/login', params, {\r\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t});\r\n\t\t\tconst decoded = jwt_decode(res.token);\r\n\t\t\tconsole.log(res);\r\n\t\t\tdispatch({ type: types.AUTH_LOGIN_SUCCESS, payload: decoded });\r\n\t\t\treturn res;\r\n\t\t} catch (error) {\r\n\t\t\t//console.log('error', error);\r\n\t\t\tdispatch({ type: types.AUTH_LOGIN_FAILURE });\r\n\t\t\treturn Promise.reject(error);\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport function userSignup(parms) {\r\n\treturn async (dispatch) => {\r\n\t\tdispatch({ type: types.AUTH_SIGNUP_REQUEST });\r\n\t\ttry {\r\n\t\t\tconsole.log(parms);\r\n\t\t\tconst res = await axiosClient.post('user/complete-registration', parms, {\r\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t});\r\n\t\t\t// console.log(res)\r\n\t\t\tconst status = res.status;\r\n\t\t\tif (status == 201) {\r\n\t\t\t\tdispatch({ type: types.AUTH_SIGNUP_SUCCESS, payload: res.result.name });\r\n\t\t\t\treturn res.status;\r\n\t\t\t} else {\r\n\t\t\t\tdispatch({ type: types.AUTH_SIGNUP_FAILURE });\r\n\t\t\t\treturn Promise.reject(e);\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tdispatch({ type: types.AUTH_SIGNUP_FAILURE });\r\n\t\t\treturn Promise.reject(e);\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport async function saveTokens(params) {\r\n\ttry {\r\n\t\t//console.log(\"saveTokens params\", params);\r\n\t\tconst { access_token, decoded } = params;\r\n\t\tconst { expires_in, type } = decoded;\r\n\t\tconst expires_at = new Date();\r\n\t\texpires_at.setSeconds(expires_at.getSeconds() + expires_in);\r\n\t\tawait asyncLocalStorage.setItem(config.AUTH_IN, expires_in);\r\n\t\tawait asyncLocalStorage.setItem(config.AUTH_AT, expires_at.getTime());\r\n\t\tawait asyncLocalStorage.setItem(config.AUTH_TOKEN, access_token);\r\n\t\tawait asyncLocalStorage.setItem(config.AUTH_TYPE, type);\r\n\t\treturn Promise.resolve(true);\r\n\t} catch (err) {\r\n\t\tthrow err;\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}