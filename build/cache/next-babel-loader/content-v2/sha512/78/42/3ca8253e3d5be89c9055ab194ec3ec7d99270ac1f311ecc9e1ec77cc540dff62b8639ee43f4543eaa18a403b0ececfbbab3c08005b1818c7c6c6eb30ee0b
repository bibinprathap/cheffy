{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport axios from 'axios'; // For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\n\nconst options = {\n  // https://next-auth.js.org/configuration/providers\n  providers: [Providers.Credentials({\n    id: 'cheffyCredentials',\n    name: 'CheffyCredentials',\n    authorize: async credentials => {\n      try {\n        // console.log(\"credentials :\", credentials);\n        if (credentials.apiToken) {\n          // Any object returned will be saved in `user` property of the JWT\n          return Promise.resolve(credentials);\n        } else {\n          throw new Error('apiToken token is not define');\n        }\n      } catch (error) {\n        console.log('error', error);\n        return Promise.resolve(null); //   const errorCode = error.response?.data.message[0].messages[0].id;\n        //   const errorMessage =\n        //     error.response?.data.message[0].messages[0].message;\n        //   console.log(\"errorCode : \", errorCode);\n        //   console.log(\"errorMessage : \", errorMessage);\n        //   return Promise.reject(\n        //     `/auth/signin?form=${credentials.formType}&errorCode=${errorCode}&errorMessage=${errorMessage}`\n        //   );\n      }\n    }\n  })],\n  session: {\n    jwt: true\n  },\n  jwt: {// secret: process.env.JWT_SECRET\n  },\n  callbacks: {\n    signIn: async (user, account, profile) => {\n      // console.log(\"signIn user\", user);\n      // console.log(\"signIn account\", account);\n      // console.log(\"signIn profile\", profile);\n      user.role = await user.role;\n      user.userId = await user.id;\n      return true;\n    },\n    redirect: async (url, baseUrl) => {\n      // console.log('url', url);\n      // console.log('baseUrl', baseUrl);\n      return url.startsWith(baseUrl) ? Promise.resolve(url) : Promise.resolve(baseUrl);\n    },\n    session: async (session, user) => {\n      // console.log(\"session\", session);\n      // console.log(\"session user\", user);\n      if (user.apiToken) {\n        session.apiToken = user.apiToken;\n        session.role = user.role;\n        session.userId = user.userId;\n      }\n\n      return session;\n    },\n    jwt: async (token, user, account, profile, isNewUser) => {\n      // console.log(\"jwt token\", token);\n      // console.log(\"jwt user 222222\", user);\n      const isSignIn = user ? true : false;\n\n      if (isSignIn) {\n        token.apiToken = user.apiToken;\n        token.role = user.role;\n        token.userId = user.id;\n      }\n\n      return token;\n    }\n  },\n  // Events are useful for logging\n  // https://next-auth.js.org/configuration/events\n  events: {},\n  //   pages: {\n  //     signIn: '/login'\n  //   },\n  // Enable debug messages in the console if you are having problems\n  debug: true\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["C:/Users/user/Desktop/Skyslit/Web Projects/Freelance/cheffy/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","axios","options","providers","Credentials","id","name","authorize","credentials","apiToken","Promise","resolve","Error","error","console","log","session","jwt","callbacks","signIn","user","account","profile","role","userId","redirect","url","baseUrl","startsWith","token","isNewUser","isSignIn","events","debug","req","res"],"mappings":"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","sourcesContent":["import NextAuth from 'next-auth';\r\nimport Providers from 'next-auth/providers';\r\nimport axios from 'axios';\r\n\r\n// For more information on each option (and a full list of options) go to\r\n// https://next-auth.js.org/configuration/options\r\nconst options = {\r\n\t// https://next-auth.js.org/configuration/providers\r\n\tproviders: [\r\n\t\tProviders.Credentials({\r\n\t\t\tid: 'cheffyCredentials',\r\n\t\t\tname: 'CheffyCredentials',\r\n\t\t\tauthorize: async (credentials) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// console.log(\"credentials :\", credentials);\r\n\t\t\t\t\tif (credentials.apiToken) {\r\n\t\t\t\t\t\t// Any object returned will be saved in `user` property of the JWT\r\n\t\t\t\t\t\treturn Promise.resolve(credentials);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error('apiToken token is not define');\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.log('error', error);\r\n\t\t\t\t\treturn Promise.resolve(null);\r\n\t\t\t\t\t//   const errorCode = error.response?.data.message[0].messages[0].id;\r\n\t\t\t\t\t//   const errorMessage =\r\n\t\t\t\t\t//     error.response?.data.message[0].messages[0].message;\r\n\t\t\t\t\t//   console.log(\"errorCode : \", errorCode);\r\n\t\t\t\t\t//   console.log(\"errorMessage : \", errorMessage);\r\n\t\t\t\t\t//   return Promise.reject(\r\n\t\t\t\t\t//     `/auth/signin?form=${credentials.formType}&errorCode=${errorCode}&errorMessage=${errorMessage}`\r\n\t\t\t\t\t//   );\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t}),\r\n\t],\r\n\tsession: {\r\n\t\tjwt: true,\r\n\t},\r\n\tjwt: {\r\n\t\t// secret: process.env.JWT_SECRET\r\n\t},\r\n\tcallbacks: {\r\n\t\tsignIn: async (user, account, profile) => {\r\n\t\t\t// console.log(\"signIn user\", user);\r\n\t\t\t// console.log(\"signIn account\", account);\r\n\t\t\t// console.log(\"signIn profile\", profile);\r\n\t\t\tuser.role = await user.role;\r\n\t\t\tuser.userId = await user.id;\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\tredirect: async (url, baseUrl) => {\r\n\t\t\t// console.log('url', url);\r\n\t\t\t// console.log('baseUrl', baseUrl);\r\n\t\t\treturn url.startsWith(baseUrl) ? Promise.resolve(url) : Promise.resolve(baseUrl);\r\n\t\t},\r\n\t\tsession: async (session, user) => {\r\n\t\t\t// console.log(\"session\", session);\r\n\t\t\t// console.log(\"session user\", user);\r\n\t\t\tif (user.apiToken) {\r\n\t\t\t\tsession.apiToken = user.apiToken;\r\n\t\t\t\tsession.role = user.role;\r\n\t\t\t\tsession.userId = user.userId;\r\n\t\t\t}\r\n\t\t\treturn session;\r\n\t\t},\r\n\t\tjwt: async (token, user, account, profile, isNewUser) => {\r\n\t\t\t// console.log(\"jwt token\", token);\r\n\t\t\t// console.log(\"jwt user 222222\", user);\r\n\t\t\tconst isSignIn = user ? true : false;\r\n\t\t\tif (isSignIn) {\r\n\t\t\t\ttoken.apiToken = user.apiToken;\r\n\t\t\t\ttoken.role = user.role;\r\n\t\t\t\ttoken.userId = user.id;\r\n\t\t\t}\r\n\t\t\treturn token;\r\n\t\t},\r\n\t},\r\n\r\n\t// Events are useful for logging\r\n\t// https://next-auth.js.org/configuration/events\r\n\tevents: {},\r\n\t//   pages: {\r\n\t//     signIn: '/login'\r\n\t//   },\r\n\t// Enable debug messages in the console if you are having problems\r\n\tdebug: true,\r\n};\r\n\r\nexport default (req, res) => NextAuth(req, res, options);\r\n"]},"metadata":{},"sourceType":"module"}