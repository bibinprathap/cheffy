{"ast":null,"code":"import * as types from './chefType';\nimport axiosClient from '../../../utils/axios-config';\nimport { getSession } from 'next-auth/client';\nimport axios from 'axios';\nexport function chefOrders(params = {}) {\n  return async dispatch => {\n    try {\n      const res = await axiosClient.get('order/list/chef', {\n        params: params\n      });\n      return res;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n}\nexport function chefBalanceToday(params = {}) {\n  // const todayDate = new Date().toISOString().split(\"T\")[0];\n  return async dispatch => {\n    try {\n      // console.log(`user/balance?from=${todayDate}&to=${todayDate}`);\n      const res = await axiosClient.get(`user/chef/balance`);\n      return res;\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n}\nexport function chefPlates(params = {}, chefId) {\n  return async dispatch => {\n    dispatch({\n      type: types.CHEF_PLATES_REQUEST\n    });\n\n    try {\n      const res = await axiosClient.get(`plate/chef/${chefId}`, {\n        params: params\n      });\n      dispatch({\n        type: types.CHEF_PLATES_SUCCESS,\n        payload: res\n      });\n      return res;\n    } catch (error) {\n      dispatch({\n        type: types.CHEF_PLATES_SUCCESS\n      });\n      return Promise.reject(error);\n    }\n  };\n}\nexport function mustTryAndRecommendedChef(params = {\n  page: 1,\n  pageSize: 10\n}) {\n  return async dispatch => {\n    try {\n      const res = await axiosClient.get('user/mustTryAndRecommendedChefs', {// params,\n      });\n      return res;\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n}\nexport function addPlates(param) {\n  return async dispatch => {\n    dispatch({\n      type: types.CHEF_ADD_PLATES_REQUEST\n    });\n    const session = await getSession();\n    console.log(session.apiToken);\n\n    try {\n      const res = await axiosClient.post('plate', param, {\n        headers: {\n          'content-type': 'application/json',\n          'x-access-token': session.apiToken\n        }\n      });\n      console.log(res);\n      const status = res.status;\n\n      if (status == 201) {\n        dispatch({\n          type: types.CHEF_ADD_PLATES_SUCCESS,\n          payload: res.plate\n        });\n        return res;\n      } else {\n        dispatch({\n          type: types.CHEF_ADD_PLATES_FAILURE\n        });\n        console.log(res.status);\n        return Promise.reject();\n      }\n    } catch (e) {\n      dispatch({\n        type: types.CHEF_ADD_PLATES_FAILURE\n      });\n      return Promise.reject(e);\n    }\n  };\n}\nexport function addPlateImages(image) {\n  return async dispatch => {\n    dispatch({\n      type: types.CHEF_ADD_PLATES_IMAGES_REQUEST\n    });\n    const proxyurl = 'https://afternoon-brook-18118.herokuapp.com/';\n    const url = 'https://cheffyus-api.herokuapp.com/';\n\n    try {\n      const res = await axios.post(proxyurl + url + `images/`, image);\n      const status = res.status;\n\n      if (status === 200) {\n        dispatch({\n          type: types.CHEF_ADD_PLATES_IMAGES_SUCCESS,\n          payload: res.data.url\n        });\n        return res;\n      } else {\n        dispatch({\n          type: types.CHEF_ADD_PLATES_IMAGES_FAILURE\n        });\n        return Promise.reject();\n      }\n    } catch (error) {\n      dispatch({\n        type: types.CHEF_ADD_PLATES_IMAGES_FAILURE\n      });\n      return Promise.reject();\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Skyslit/Web Projects/Freelance/cheffy/src/redux/actions/chef/chefAction.js"],"names":["types","axiosClient","getSession","axios","chefOrders","params","dispatch","res","get","error","Promise","reject","chefBalanceToday","e","chefPlates","chefId","type","CHEF_PLATES_REQUEST","CHEF_PLATES_SUCCESS","payload","mustTryAndRecommendedChef","page","pageSize","addPlates","param","CHEF_ADD_PLATES_REQUEST","session","console","log","apiToken","post","headers","status","CHEF_ADD_PLATES_SUCCESS","plate","CHEF_ADD_PLATES_FAILURE","addPlateImages","image","CHEF_ADD_PLATES_IMAGES_REQUEST","proxyurl","url","CHEF_ADD_PLATES_IMAGES_SUCCESS","data","CHEF_ADD_PLATES_IMAGES_FAILURE"],"mappings":"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","sourcesContent":["import * as types from './chefType';\r\nimport axiosClient from '../../../utils/axios-config';\r\nimport { getSession } from 'next-auth/client';\r\nimport axios from 'axios';\r\n\r\nexport function chefOrders(params = {}) {\r\n\treturn async (dispatch) => {\r\n\t\ttry {\r\n\t\t\tconst res = await axiosClient.get('order/list/chef', {\r\n\t\t\t\tparams: params,\r\n\t\t\t});\r\n\t\t\treturn res;\r\n\t\t} catch (error) {\r\n\t\t\treturn Promise.reject(error);\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport function chefBalanceToday(params = {}){\r\n\t// const todayDate = new Date().toISOString().split(\"T\")[0];\r\n\treturn async(dispatch) => {\r\n\t  try{\r\n\t\t// console.log(`user/balance?from=${todayDate}&to=${todayDate}`);\r\n\t\tconst res = await axiosClient.get(`user/chef/balance`);\r\n\t\treturn res;\r\n\t  }\r\n\t  catch(e){\r\n\t\treturn Promise.reject(e);\r\n\t  }\r\n\t}\r\n  }\r\n\r\nexport function chefPlates(params = {}, chefId) {\r\n\treturn async (dispatch) => {\r\n\t\tdispatch({ type: types.CHEF_PLATES_REQUEST });\r\n\t\ttry {\r\n\t\t\tconst res = await axiosClient.get(`plate/chef/${chefId}`, {\r\n\t\t\t\tparams: params,\r\n\t\t\t});\r\n\t\t\tdispatch({ type: types.CHEF_PLATES_SUCCESS, payload: res });\r\n\t\t\treturn res;\r\n\t\t} catch (error) {\r\n\t\t\tdispatch({ type: types.CHEF_PLATES_SUCCESS });\r\n\t\t\treturn Promise.reject(error);\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport function mustTryAndRecommendedChef(params = { page: 1, pageSize: 10 }) {\r\n\treturn async (dispatch) => {\r\n\t\ttry {\r\n\t\t\tconst res = await axiosClient.get('user/mustTryAndRecommendedChefs', {\r\n\t\t\t\t// params,\r\n\t\t\t});\r\n\t\t\treturn res;\r\n\t\t} catch (error) {\r\n\t\t\treturn Promise.reject(error);\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport function addPlates(param) {\r\n\treturn async (dispatch) => {\r\n\t\tdispatch({ type: types.CHEF_ADD_PLATES_REQUEST });\r\n\t\tconst session = await getSession();\r\n\t\tconsole.log(session.apiToken);\r\n\t\ttry {\r\n\t\t\tconst res = await axiosClient.post('plate', param, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'content-type': 'application/json',\r\n\t\t\t\t\t'x-access-token': session.apiToken,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\tconsole.log(res);\r\n\t\t\tconst status = res.status;\r\n\t\t\tif (status == 201) {\r\n\t\t\t\tdispatch({ type: types.CHEF_ADD_PLATES_SUCCESS, payload: res.plate });\r\n\t\t\t\treturn res;\r\n\t\t\t} else {\r\n\t\t\t\tdispatch({ type: types.CHEF_ADD_PLATES_FAILURE });\r\n\t\t\t\tconsole.log(res.status);\r\n\t\t\t\treturn Promise.reject();\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tdispatch({ type: types.CHEF_ADD_PLATES_FAILURE });\r\n\t\t\treturn Promise.reject(e);\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport function addPlateImages(image) {\r\n\treturn async (dispatch) => {\r\n\t\tdispatch({ type: types.CHEF_ADD_PLATES_IMAGES_REQUEST });\r\n\t\tconst proxyurl = 'https://afternoon-brook-18118.herokuapp.com/';\r\n\t\tconst url = 'https://cheffyus-api.herokuapp.com/';\r\n\t\ttry {\r\n\t\t\tconst res = await axios.post(proxyurl + url + `images/`, image);\r\n\t\t\tconst status = res.status;\r\n\t\t\tif (status === 200) {\r\n\t\t\t\tdispatch({ type: types.CHEF_ADD_PLATES_IMAGES_SUCCESS, payload: res.data.url });\r\n\t\t\t\treturn res;\r\n\t\t\t} else {\r\n\t\t\t\tdispatch({ type: types.CHEF_ADD_PLATES_IMAGES_FAILURE });\r\n\t\t\t\treturn Promise.reject();\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tdispatch({ type: types.CHEF_ADD_PLATES_IMAGES_FAILURE });\r\n\t\t\treturn Promise.reject();\r\n\t\t}\r\n\t};\r\n}\r\n"]},"metadata":{},"sourceType":"module"}