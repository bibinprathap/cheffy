{"ast":null,"code":"import { SET_IS_FETCHING_FOOD, SET_ERROR_FETCHING_FOOD, ADD_FOOD_TO_COLLECTION } from './foodTypes';\nimport axiosClient from '../../../utils/axios-config';\nexport const setIsFetchingFood = isFetching => {\n  return {\n    type: SET_IS_FETCHING_FOOD,\n    isFetching\n  };\n};\nexport const setErrorFetchingFood = errorFetching => {\n  return {\n    type: SET_ERROR_FETCHING_FOOD,\n    errorFetching\n  };\n};\nexport const getPlateByID = plateID => {\n  return async dispatch => {\n    try {\n      const res = axiosClient.get(`plate/show/${plateID}`);\n      return res;\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n};\nexport const addFoodToCollection = food => {\n  return {\n    type: ADD_FOOD_TO_COLLECTION,\n    payload: food\n  };\n};\nexport const errorFetchingFood = error => {\n  return dispatch => {\n    dispatch(setIsFetchingFood(true));\n    dispatch(setErrorFetchingFood(false));\n    console.log(error);\n  };\n};\nexport const getCategory = () => {\n  return async dispatch => {\n    try {\n      const res = axiosClient.get(\"/category\");\n      return res;\n    } catch (e) {\n      console.log(e);\n      new Promise.reject(e);\n    }\n  };\n};\nexport const fetchFood = () => {\n  return async (dispatch, getState) => {\n    const {\n      food: {\n        collection,\n        status: {\n          isFetching\n        }\n      }\n    } = getState();\n\n    if (isFetching) {\n      return;\n    }\n\n    dispatch(setErrorFetchingFood(false));\n    dispatch(setIsFetchingFood(true));\n    const request = await axiosClient.get('plate/');\n    const food = request.data;\n\n    try {\n      dispatch(addFoodToCollection(food));\n      dispatch(setIsFetchingFood(false));\n    } catch (error) {\n      return dispatch(setErrorFetchingFood(error));\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/Skyslit/Web Projects/Freelance/cheffy/src/redux/actions/food/foodAction.js"],"names":["SET_IS_FETCHING_FOOD","SET_ERROR_FETCHING_FOOD","ADD_FOOD_TO_COLLECTION","axiosClient","setIsFetchingFood","isFetching","type","setErrorFetchingFood","errorFetching","getPlateByID","plateID","dispatch","res","get","e","Promise","reject","addFoodToCollection","food","payload","errorFetchingFood","error","console","log","getCategory","fetchFood","getState","collection","status","request","data"],"mappings":"AAAA,SAASA,oBAAT,EAA+BC,uBAA/B,EAAwDC,sBAAxD,QAAsF,aAAtF;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,UAAD,IAAgB;AAChD,SAAO;AACNC,IAAAA,IAAI,EAAEN,oBADA;AAENK,IAAAA;AAFM,GAAP;AAIA,CALM;AAOP,OAAO,MAAME,oBAAoB,GAAIC,aAAD,IAAmB;AACtD,SAAO;AACNF,IAAAA,IAAI,EAAEL,uBADA;AAENO,IAAAA;AAFM,GAAP;AAIA,CALM;AAOP,OAAO,MAAMC,YAAY,GAAIC,OAAD,IAAa;AACxC,SAAO,MAAMC,QAAN,IAAkB;AACxB,QAAG;AACH,YAAMC,GAAG,GAAGT,WAAW,CAACU,GAAZ,CAAiB,cAAaH,OAAQ,EAAtC,CAAZ;AACA,aAAOE,GAAP;AACC,KAHD,CAIA,OAAME,CAAN,EAAQ;AACP,aAAOC,OAAO,CAACC,MAAR,CAAeF,CAAf,CAAP;AACA;AACD,GARD;AASA,CAVM;AAYP,OAAO,MAAMG,mBAAmB,GAAIC,IAAD,IAAU;AAC5C,SAAO;AACNZ,IAAAA,IAAI,EAAEJ,sBADA;AAENiB,IAAAA,OAAO,EAAED;AAFH,GAAP;AAIA,CALM;AAOP,OAAO,MAAME,iBAAiB,GAAIC,KAAD,IAAW;AAC3C,SAAQV,QAAD,IAAc;AACpBA,IAAAA,QAAQ,CAACP,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AACAO,IAAAA,QAAQ,CAACJ,oBAAoB,CAAC,KAAD,CAArB,CAAR;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,GAJD;AAKA,CANM;AAQP,OAAO,MAAMG,WAAW,GAAG,MAAM;AAChC,SAAO,MAAOb,QAAP,IAAqB;AAC3B,QAAG;AACF,YAAMC,GAAG,GAAGT,WAAW,CAACU,GAAZ,CAAgB,WAAhB,CAAZ;AACA,aAAOD,GAAP;AACA,KAHD,CAIA,OAAME,CAAN,EAAQ;AACPQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,CAAZ;AACA,UAAIC,OAAO,CAACC,MAAZ,CAAmBF,CAAnB;AACA;AACD,GATD;AAUA,CAXM;AAaP,OAAO,MAAMW,SAAS,GAAG,MAAM;AAC9B,SAAO,OAAOd,QAAP,EAAiBe,QAAjB,KAA8B;AACpC,UAAM;AACLR,MAAAA,IAAI,EAAE;AACLS,QAAAA,UADK;AAELC,QAAAA,MAAM,EAAE;AAAEvB,UAAAA;AAAF;AAFH;AADD,QAKFqB,QAAQ,EALZ;;AAOA,QAAIrB,UAAJ,EAAgB;AACf;AACA;;AAEDM,IAAAA,QAAQ,CAACJ,oBAAoB,CAAC,KAAD,CAArB,CAAR;AACAI,IAAAA,QAAQ,CAACP,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AAEA,UAAMyB,OAAO,GAAG,MAAM1B,WAAW,CAACU,GAAZ,CAAgB,QAAhB,CAAtB;AACA,UAAMK,IAAI,GAAGW,OAAO,CAACC,IAArB;;AACA,QAAI;AACHnB,MAAAA,QAAQ,CAACM,mBAAmB,CAACC,IAAD,CAApB,CAAR;AACAP,MAAAA,QAAQ,CAACP,iBAAiB,CAAC,KAAD,CAAlB,CAAR;AACA,KAHD,CAGE,OAAOiB,KAAP,EAAc;AACf,aAAOV,QAAQ,CAACJ,oBAAoB,CAACc,KAAD,CAArB,CAAf;AACA;AACD,GAvBD;AAwBA,CAzBM","sourcesContent":["import { SET_IS_FETCHING_FOOD, SET_ERROR_FETCHING_FOOD, ADD_FOOD_TO_COLLECTION } from './foodTypes';\r\nimport axiosClient from '../../../utils/axios-config';\r\n\r\nexport const setIsFetchingFood = (isFetching) => {\r\n\treturn {\r\n\t\ttype: SET_IS_FETCHING_FOOD,\r\n\t\tisFetching,\r\n\t};\r\n};\r\n\r\nexport const setErrorFetchingFood = (errorFetching) => {\r\n\treturn {\r\n\t\ttype: SET_ERROR_FETCHING_FOOD,\r\n\t\terrorFetching,\r\n\t};\r\n};\r\n\r\nexport const getPlateByID = (plateID) => {\r\n\treturn async(dispatch) =>{\r\n\t\ttry{\r\n\t\tconst res = axiosClient.get(`plate/show/${plateID}`)\r\n\t\treturn res;\r\n\t\t}\r\n\t\tcatch(e){\r\n\t\t\treturn Promise.reject(e);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const addFoodToCollection = (food) => {\r\n\treturn {\r\n\t\ttype: ADD_FOOD_TO_COLLECTION,\r\n\t\tpayload: food,\r\n\t};\r\n};\r\n\r\nexport const errorFetchingFood = (error) => {\r\n\treturn (dispatch) => {\r\n\t\tdispatch(setIsFetchingFood(true));\r\n\t\tdispatch(setErrorFetchingFood(false));\r\n\t\tconsole.log(error);\r\n\t};\r\n};\r\n\r\nexport const getCategory = () => {\r\n\treturn async( dispatch ) => {\r\n\t\ttry{\r\n\t\t\tconst res = axiosClient.get(\"/category\")\r\n\t\t\treturn res\r\n\t\t}\r\n\t\tcatch(e){\r\n\t\t\tconsole.log(e)\r\n\t\t\tnew Promise.reject(e);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const fetchFood = () => {\r\n\treturn async (dispatch, getState) => {\r\n\t\tconst {\r\n\t\t\tfood: {\r\n\t\t\t\tcollection,\r\n\t\t\t\tstatus: { isFetching },\r\n\t\t\t},\r\n\t\t} = getState();\r\n\r\n\t\tif (isFetching) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdispatch(setErrorFetchingFood(false));\r\n\t\tdispatch(setIsFetchingFood(true));\r\n\r\n\t\tconst request = await axiosClient.get('plate/');\r\n\t\tconst food = request.data;\r\n\t\ttry {\r\n\t\t\tdispatch(addFoodToCollection(food));\r\n\t\t\tdispatch(setIsFetchingFood(false));\r\n\t\t} catch (error) {\r\n\t\t\treturn dispatch(setErrorFetchingFood(error));\r\n\t\t}\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}